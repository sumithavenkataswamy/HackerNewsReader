name: Build and Deploy

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Setup .NET environment
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Step 3: Restore dependencies
      - name: Restore Dependencies
        run: dotnet restore

      # Step 4: Build the application
      - name: Build Application
        run: dotnet build --no-restore --configuration Release

      # Step 5: Run tests with code coverage
      - name: Run Tests with Code Coverage
        run: |
          dotnet test Tests/HackerNewsReader.Application.Tests --collect:"XPlat Code Coverage" --results-directory TestResults/Application
          dotnet test Tests/HackerNewsReader.Domain.Tests --collect:"XPlat Code Coverage" --results-directory TestResults/Domain
          dotnet test Tests/HackerNewsReader.Api.Tests --collect:"XPlat Code Coverage" --results-directory TestResults/Api
          dotnet test Tests/HackerNewsReader.Infrastructure.Tests --collect:"XPlat Code Coverage" --results-directory TestResults/Infrastructure

      # Step 6: Install ReportGenerator for code coverage
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      # Step 7: Generate code coverage report
      - name: Generate Coverage Report
        run: |
          reportgenerator \
            -reports:"TestResults/**/coverage.cobertura.xml" \
            -targetdir:coverage \
            -reporttypes:Html;MarkdownSummaryGithub

      # Step 8: Display Markdown coverage summary in GitHub Actions
      - name: Show Coverage Summary in Logs
        run: cat coverage/SummaryGithub.md

      # Step 9: Upload coverage report
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage

  build-and-publish:
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      build_version: ${{ steps.build_version.outputs.build_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Build Version
        id: build_version
        run: |
          BUILD_VERSION=$(date +%Y%m%d%H%M%S)
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
          echo "build_version=$BUILD_VERSION" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: |
          docker build \
          -t ghcr.io/${{ github.actor }}/hacker-news-reader-api:${{ env.BUILD_VERSION }} \
          -t ghcr.io/${{ github.actor }}/hacker-news-reader-api:latest \
          .

      - name: Push Docker images
        run: |
          docker push ghcr.io/${{ github.actor }}/hacker-news-reader-api:${{ env.BUILD_VERSION }}
          docker push ghcr.io/${{ github.actor }}/hacker-news-reader-api:latest

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: github.ref_name == 'develop'
    environment: dev
    steps:
      - name: Display Environment Info
        run: echo "Deploying to dev - ${{ needs.build-and-publish.outputs.build_version }} environment..."

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure Subscription
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION }}

      - name: Update Azure Container App
        run: |
          az containerapp update \
          --name ${{ secrets.CONTAINER_APP }} \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --image ghcr.io/sumithavenkataswamy/hacker-news-reader-api:${{ needs.build-and-publish.outputs.build_version }} \
          --set registries="ghcr.io=${{ secrets.GHCR_USERNAME }}=${{ secrets.TOKEN }}"

  deploy-test:
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: github.ref_name == 'main'
    environment: test
    steps:
      - name: Display Environment Info
        run: echo "Deploying to test - ${{ needs.build-and-publish.outputs.build_version }} environment..."

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure Subscription
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION }}

      - name: Update Azure Container App
        run: |
          az containerapp update \
          --name ${{ secrets.CONTAINER_APP }} \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --image ghcr.io/sumithavenkataswamy/hacker-news-reader-api:${{ needs.build-and-publish.outputs.build_version }} \
          --set registries="ghcr.io=${{ secrets.GHCR_USERNAME }}=${{ secrets.TOKEN }}"

  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-test
    if: github.ref_name == 'main'
    environment: prod
    steps:
      - name: Display Environment Info
        run: echo "Deploying to prod - ${{ needs.build-and-publish.outputs.build_version }} environment..."

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure Subscription
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION }}

      - name: Update Azure Container App
        run: |
          az containerapp update \
          --name ${{ secrets.CONTAINER_APP }} \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --image ghcr.io/sumithavenkataswamy/hacker-news-reader-api:${{ needs.build-and-publish.outputs.build_version }} \
          --set registries="ghcr.io=${{ secrets.GHCR_USERNAME }}=${{ secrets.TOKEN }}"
